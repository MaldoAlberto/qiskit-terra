diff --cc test/python/circuit/test_random_circuit.py
index 58e1ca026,50ab40873..c1f6c67dd
--- a/test/python/circuit/test_random_circuit.py
+++ b/test/python/circuit/test_random_circuit.py
@@@ -63,17 -63,8 +63,36 @@@ class TestCircuitRandom(QiskitTestCase)
          conditions = (getattr(instruction.operation, "condition", None) for instruction in circ)
          conditions = [x for x in conditions if x is not None]
          self.assertNotEqual(conditions, [])
+         for (register, value) in conditions:
+             self.assertIsInstance(register, (ClassicalRegister, Clbit))
+             # Condition values always have to be Python bigints (of which `bool` is a subclass), not
+             # any of Numpy's fixed-width types, for example.
+             self.assertIsInstance(value, int)
++
++    def test_random_mid_circuit_measure_conditional(self):
++        """Test random circuit with mid-circuit measurements for conditionals."""
++        num_qubits = depth = 2
++        circ = random_circuit(num_qubits, depth, conditional=True, seed=4)
++        self.assertEqual(circ.width(), 2 * num_qubits)
++        op_names = [instruction.operation.name for instruction in circ]
++        # Before a condition, there needs to be measurement in all the qubits.
++        self.assertEqual(4, len(op_names))
++        self.assertEqual(["measure"] * num_qubits, op_names[1 : 1 + num_qubits])
++        conditions = [
++            bool(getattr(instruction.operation, "condition", None)) for instruction in circ
++        ]
++        self.assertEqual([False, False, False, True], conditions)
 +
 +    def test_random_mid_circuit_measure_conditional(self):
 +        """Test random circuit with mid-circuit measurements for conditionals."""
 +        num_qubits = depth = 2
 +        circ = random_circuit(num_qubits, depth, conditional=True, seed=4)
 +        self.assertEqual(circ.width(), 2 * num_qubits)
 +        op_names = [instruction.operation.name for instruction in circ]
 +        # Before a condition, there needs to be measurement in all the qubits.
 +        self.assertEqual(4, len(op_names))
 +        self.assertEqual(["measure"] * num_qubits, op_names[1 : 1 + num_qubits])
 +        conditions = [
 +            bool(getattr(instruction.operation, "condition", None)) for instruction in circ
 +        ]
 +        self.assertEqual([False, False, False, True], conditions)
